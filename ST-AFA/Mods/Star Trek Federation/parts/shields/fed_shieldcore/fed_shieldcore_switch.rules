Part : <./Data/ships/terran/base_part_terran.rules>/Part
{
	NameKey = "Parts/ShieldCore"
	IconNameKey = "Parts/ShieldCoreIcon"
	ID = "st-afa.fed_shieldcore"
	EditorGroup = "Starfleet"
	DescriptionKey = "Parts/ShieldCoreDesc"
	Resources
	[
		[steel, 40]
		[coil, 40]
	]
	AIValueFactor = 10
	Size = [4, 4]
	SelectionPriority = 1
	SelectionTypeID = "shield_gen"
	SelectionTypeByRotation = true
	MaxHealth = 6000
	TypeCategories = [defense, uses_power]
	ReceivableBuffs : ^/0/ReceivableBuffs [AntimatterPower]
	PenetrationRectType = Normal
	ShieldRadius = 0.01
	BlockedTravelCells
	[
		[1, 1]
		[1, 2]
		[2, 1]
		[2, 2]
	]
	AllowedDoorLocations
	[
		[-1, 0]
		[0, -1]
		[3, -1]
		[4, 0]
		[4, 3]
		[3, 4]
		[0, 4]
		[-1, 3]
	]
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [64, 64]
	}
	Components : ^/0/Components
	{
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, CombinedBatteryStorage]
			Mode = All
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
			RequiresCommand = false
		}

		CommandConsumer
		{
			Type = CommandConsumer
			OperationalToggle = PowerToggle
			CommandPoints = 20
		}
		
		ProgressBar
		{
			Type = ProgressBar
			OperationalToggle = IsOperational
			ShowProgressFor = CombinedBatteryStorage
			LowColor = [0, 0, 255]
			HighColor = [0, 0, 255]
			FullColor = [0, 0, 255]
			Height = 10
		}
		
		CombinedBatteryStorage
		{
			Type = MultiResourceStorage
			ResourceType = battery
			ResourceStorages = [FrontBatteryStorage, BackBatteryStorage, LeftBatteryStorage, RightBatteryStorage]
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
		
		//
		// Original ArcShield
		//
		BaseArcShield
		{
			Type = ArcShield
			Radius = &~/Part/ShieldRadius
			Arc = 0.01d
			OperationalToggle = FrontIsOperational
			PenetrationResistance = [25, 0]
			DrainResourcesFrom = FrontBatteryStorage
			ResourceDrainPerDamage = .2
			Rotation = -90d
			Location = [2, 2]

			BlueprintArcSprite
			{
				Texture
				{
					File = "shield_energy.png"
					SampleMode = Linear
					MipLevels = 1
				}
				Size = [0, 1.5]
				Color = [0, 0, 255, 127]
			}
			BlueprintArcSpriteSegments = 64

			CoverageArcSprite
			{
				Texture
				{
					File = "shield_energy.png"
					SampleMode = Linear
					MipLevels = 1
				}
				Size = [0, 1.5]
				Color = [255, 255, 255, 127]
			}
			CoverageArcSpriteSegments = 64

			ShieldMediaEffects
			[
				{
					Type = ArcShield
					Radius = &~/Part/Components/BaseArcShield/Radius
					Arc = &~/Part/Components/BaseArcShield/Arc
					FadeInTime = .25
					FadeOutTime = .25
					FadeFromScale = .8
					ArcSprite
					{
						Texture
						{
							File = "shield_energy.png"
							SampleMode = Linear
							MipLevels = 1
						}
						Shader = "shield.shader"
						_waveTex
						{
							File = "shield_energy_wave.png"
							UVMode = Wrap
							SampleMode = Linear
							MipLevels = max
						}
						_maskTex
						{
							File = "shield_mask.png"
							SampleMode = Linear
							MipLevels = 1
						}
						_waveSpeed = 1
						_waveAlpha = 1
						_waveCurveInterval = .5
						_waveCurveMagnitude = .35
						_waveCurveUOffsetPerSecond = .2
						_fullPowerColor1 = [54, 0, 91, 127]
						_lowPowerColor1 = [54, 0, 91, 127]
						_fullPowerColor2 = [0, 0, 255, 127]
						_lowPowerColor2 = [255, 0, 0, 127]
						_lowPowerThicknessExponent = .6
						_xScale = 1
						TargetBlendMode = Add
						Size = [0, 1.5]
					}
					ArcSpriteSegments = 64
					Bucket = Lower1
				}

				: /BASE_SOUNDS/AudioExteriorDetail
				{
					Sound = "shield_loop.wav"
					Volume = .15
					Speed = .5
					MaxConcurrent = 1
					MaxConcurrentVolume = .3
					DynamicVolume : ^/0/DynamicVolume
					{
						MinDistance = .75
						MaxDistance = 1.5
					}
					IgnoreIntensity = true
				}
			]

			HitMediaEffects
			[
				{
					Type = ArcShield
					FadeInTime = .1
					FadeOutTime = .5
					Radius = &~/Part/Components/BaseArcShield/Radius
					Arc = 20d
					ArcSprite
					{
						Texture
						{
							File = "shield_energy_original.png"
							SampleMode = Linear
							MipLevels = max
						}
						Shader = "shield.shader"
						_waveTex
						{
							File = "shield_energy_wave.png"
							UVMode = Wrap
							SampleMode = Linear
							MipLevels = max
						}
						_maskTex
						{
							File = "shield_energy_original.png"
							SampleMode = Linear
							MipLevels = max
						}
						_waveSpeed = -2
						_waveAlpha = .75
						_waveCurveInterval = 1
						_waveCurveMagnitude = .25
						_waveCurveUOffsetPerSecond = 0
						//TargetBlendMode = Add
						_fullPowerColor1 = [0, 0, 255, 127]
						_lowPowerColor1 = [255, 0, 0, 200]
						_fullPowerColor2 = [154, 98, 238, 127]
						_lowPowerColor2 = [236, 150, 234, 127]
						_lowPowerThicknessExponent = .6
						_xScale = 1
						TargetBlendMode = Add
						Size = [0, 3]
					}
					ArcSpriteSegments = 6
					Bucket = Upper3
				}

				: /BASE_SOUNDS/AudioExterior
				{
					Sound = "shield_hit.wav"
					Volume = 1
					Speed = 1
					IgnoreIntensity = true
					SpeedVariation = .25
					MaxConcurrent = 10
				}
			]
		}
		
		BaseEmitterEffect
		{
			Type = ContinuousEffects
			ChainedTo = BaseArcShield
			FactorMediaEffectsIntensityWith = FrontBatteryStorage
			Location = [2.2, 0]
			OperationalToggle = FrontIsOperational
			ParentToShip = true
			MediaEffects
			[
				{
					Type = ArcShield
					Radius = 2.2
					Arc = 90d
					FadeInTime = .25
					FadeOutTime = .25
					ArcSprite
					{
						Texture
						{
							File = "shield_energy.png"
							SampleMode = Linear
							MipLevels = 1
						}
						UVRect = [0, 1, 1, -1]
						Shader = "shield.shader"
						_waveTex
						{
							File = "shield_energy_wave.png"
							UVMode = Wrap
							SampleMode = Linear
							MipLevels = max
						}
						_maskTex
						{
							File = "shield_mask.png"
							SampleMode = Linear
							MipLevels = 1
						}
						_waveSpeed = -1
						_waveAlpha = 1
						_waveCurveInterval = .5
						_waveCurveMagnitude = .35
						_waveCurveUOffsetPerSecond = .2
						_fullPowerColor1 = [54, 0, 91, 127]
						_lowPowerColor1 = [54, 0, 91, 127]
						_fullPowerColor2 = [0, 0, 255, 127]
						_lowPowerColor2 = [255, 0, 0, 127]
						_lowPowerThicknessExponent = .6
						TargetBlendMode = Add
						_xScale = 0.5
						Size = [0, 1.0]
					}
					ArcSpriteSegments = 12
					Bucket = Upper1
				}

				: /BASE_SOUNDS/AudioExteriorDetail
				{
					Sound = "shield_emitter_loop.wav"
					Volume = .2
					Speed = 1
					MaxConcurrent = 1
					MaxConcurrentVolume = .4
					IgnoreIntensity = true
				}
			]
		}

		BaseShieldOperationEffects
		{
			Type = ToggleEffects
			ChainedTo = BaseArcShield
			Location = [&~/Part/Components/BaseArcShield/Radius, 0]
			Toggle = FrontIsOperational
			ToggledOnMediaEffects
			[
				: /BASE_SOUNDS/AudioExterior
				{
					Sound = "activate.wav"
					Volume = .5
					Speed = 1
					IgnoreIntensity = true
				}
			]
			ToggledOffMediaEffects
			[
				: /BASE_SOUNDS/AudioExterior
				{
					Sound = "deactivate.wav"
					Volume = .5
					Speed = 1
					IgnoreIntensity = true
				}
			]
		}
		
		//
		// Toggles
		//
		ShieldType
		{
			Type = UIToggle
			ToggleID = "shield_type"
			Default = 0
			AlwaysAllowInBuildMode = true
		}
		ShieldToggleXS
		{
			Type = ModeToggle
			Mode = ShieldType
			OnMode = 0
		}
		ShieldToggleS
		{
			Type = ModeToggle
			Mode = ShieldType
			OnMode = 1
		}
		ShieldToggleM
		{
			Type = ModeToggle
			Mode = ShieldType
			OnMode = 2
		}
		ShieldToggleL
		{
			Type = ModeToggle
			Mode = ShieldType
			OnMode = 3
		}
		ShieldToggleXL
		{
			Type = ModeToggle
			Mode = ShieldType
			OnMode = 4
		}
		
		ToggledComponents_ArcShield_XS
		{
			Type = ToggledComponents
			Toggle = ShieldToggleXS
			IncludeInBlueprints = true
			Components =
			{
				ArcShield_XS_Front : &~/Part/Components/BaseArcShield
				{
					Radius = 15
					Arc = 90d
					Rotation = -90d
					OperationalToggle = FrontIsOperational
					DrainResourcesFrom = FrontBatteryStorage
					ShieldMediaEffects
					[
						{
							Radius = 15
							Arc = 90d
						}
					]
					HitMediaEffects
					[
						{
							Radius = 15
						}
					]
				}
				FrontEmitterEffect : &~/Part/Components/BaseEmitterEffect
				{
					ChainedTo = ArcShield_XS_Front
					FactorMediaEffectsIntensityWith = FrontBatteryStorage
					OperationalToggle = FrontIsOperational
				}
				FrontShieldOperationEffects : &~/Part/Components/BaseShieldOperationEffects
				{
					Type = ToggleEffects
					ChainedTo = ArcShield_XS_Front
					Location = [15, 0]
					Toggle = FrontIsOperational
				}
			}
		}
		
		//
		// Frontshield
		//
		FrontIsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, FrontBatteryStorage]
			Mode = All
		}
		FrontBatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 24000
			ToggleOnResources = 23001
			DrainOnFtlJump = true
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
		FrontBatteryConsumer
		{
			Type = ResourceConsumer
			ResourceType = battery
			Storage = FrontBatteryStorage
			DefaultPriority = &/PRIORITIES/Defense_Supply
			ResupplyThreshold = 500
			OperationalToggle = PowerToggle
		}

		FrontPowerDrain
		{
			Type = ResourceConverter
			OperationalToggle = FrontIsOperational
			FromStorage = FrontBatteryStorage
			FromQuantity = 100
			MinFromQuantityForConversion = 1
			Interval = 1
		}
		
		//
		// Backshield
		//
		BackIsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, BackBatteryStorage]
			Mode = All
		}
		BackBatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 12000
			ToggleOnResources = 11001
			DrainOnFtlJump = true
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
		BackBatteryConsumer
		{
			Type = ResourceConsumer
			ResourceType = battery
			Storage = BackBatteryStorage
			DefaultPriority = &/PRIORITIES/Defense_Supply
			ResupplyThreshold = 500
			OperationalToggle = PowerToggle
		}

		BackPowerDrain
		{
			Type = ResourceConverter
			OperationalToggle = BackIsOperational
			FromStorage = BackBatteryStorage
			FromQuantity = 100
			MinFromQuantityForConversion = 1
			Interval = 1
		}
		BackArcShield
		{
			Type = ArcShield
			Radius = &~/Part/ShieldRadius
			Arc = 90d
			OperationalToggle = BackIsOperational
			PenetrationResistance = [25, 0]
			DrainResourcesFrom = BackBatteryStorage
			ResourceDrainPerDamage = .4
			Rotation = 90d
			Location = [2, 2]

			BlueprintArcSprite
			{
				Texture
				{
					File = "shield_energy.png"
					SampleMode = Linear
					MipLevels = 1
				}
				Size = [0, 1.5]
				Color = [0, 0, 255, 127]
			}
			BlueprintArcSpriteSegments = 64

			CoverageArcSprite
			{
				Texture
				{
					File = "shield_energy.png"
					SampleMode = Linear
					MipLevels = 1
				}
				Size = [0, 1.5]
				Color = [255, 255, 255, 127]
			}
			CoverageArcSpriteSegments = 64

			ShieldMediaEffects
			[
				{
					Type = ArcShield
					Radius = &~/Part/Components/BackArcShield/Radius
					Arc = &~/Part/Components/BackArcShield/Arc
					FadeInTime = .25
					FadeOutTime = .25
					FadeFromScale = .8
					ArcSprite
					{
						Texture
						{
							File = "shield_energy.png"
							SampleMode = Linear
							MipLevels = 1
						}
						Shader = "shield.shader"
						_waveTex
						{
							File = "shield_energy_wave.png"
							UVMode = Wrap
							SampleMode = Linear
							MipLevels = max
						}
						_maskTex
						{
							File = "shield_mask.png"
							SampleMode = Linear
							MipLevels = 1
						}
						_waveSpeed = 1
						_waveAlpha = 1
						_waveCurveInterval = .5
						_waveCurveMagnitude = .35
						_waveCurveUOffsetPerSecond = .2
						_fullPowerColor1 = [54, 0, 91, 127]
						_lowPowerColor1 = [54, 0, 91, 127]
						_fullPowerColor2 = [0, 0, 255, 127]
						_lowPowerColor2 = [255, 0, 0, 127]
						_lowPowerThicknessExponent = .6
						_xScale = 1
						TargetBlendMode = Add
						Size = [0, 1.5]
					}
					ArcSpriteSegments = 64
					Bucket = Lower1
				}

				: /BASE_SOUNDS/AudioExteriorDetail
				{
					Sound = "shield_loop.wav"
					Volume = .15
					Speed = .5
					MaxConcurrent = 1
					MaxConcurrentVolume = .3
					DynamicVolume : ^/0/DynamicVolume
					{
						MinDistance = .75
						MaxDistance = 1.5
					}
					IgnoreIntensity = true
				}
			]

			HitMediaEffects
			[
				{
					Type = ArcShield
					FadeInTime = .1
					FadeOutTime = .5
					Radius = &~/Part/Components/BackArcShield/Radius
					Arc = 20d
					ArcSprite
					{
						Texture
						{
							File = "shield_energy_original.png"
							SampleMode = Linear
							MipLevels = max
						}
						Shader = "shield.shader"
						_waveTex
						{
							File = "shield_energy_wave.png"
							UVMode = Wrap
							SampleMode = Linear
							MipLevels = max
						}
						_maskTex
						{
							File = "shield_energy_original.png"
							SampleMode = Linear
							MipLevels = max
						}
						_waveSpeed = -2
						_waveAlpha = .75
						_waveCurveInterval = 1
						_waveCurveMagnitude = .25
						_waveCurveUOffsetPerSecond = 0
						//TargetBlendMode = Add
						_fullPowerColor1 = [0, 0, 255, 127]
						_lowPowerColor1 = [255, 0, 0, 200]
						_fullPowerColor2 = [154, 98, 238, 127]
						_lowPowerColor2 = [236, 150, 234, 127]
						_lowPowerThicknessExponent = .6
						_xScale = 1
						TargetBlendMode = Add
						Size = [0, 3]
					}
					ArcSpriteSegments = 6
					Bucket = Upper3
				}

				: /BASE_SOUNDS/AudioExterior
				{
					Sound = "shield_hit.wav"
					Volume = 1
					Speed = 1
					IgnoreIntensity = true
					SpeedVariation = .25
					MaxConcurrent = 10
				}
			]
		}

		BackEmitterEffect
		{
			Type = ContinuousEffects
			ChainedTo = BackArcShield
			FactorMediaEffectsIntensityWith = BackBatteryStorage
			Location = [2.2, 0]
			OperationalToggle = BackIsOperational
			ParentToShip = true
			MediaEffects
			[
				{
					Type = ArcShield
					Radius = 2.2
					Arc = 90d
					FadeInTime = .25
					FadeOutTime = .25
					ArcSprite
					{
						Texture
						{
							File = "shield_energy.png"
							SampleMode = Linear
							MipLevels = 1
						}
						UVRect = [0, 1, 1, -1]
						Shader = "shield.shader"
						_waveTex
						{
							File = "shield_energy_wave.png"
							UVMode = Wrap
							SampleMode = Linear
							MipLevels = max
						}
						_maskTex
						{
							File = "shield_mask.png"
							SampleMode = Linear
							MipLevels = 1
						}
						_waveSpeed = -1
						_waveAlpha = 1
						_waveCurveInterval = .5
						_waveCurveMagnitude = .35
						_waveCurveUOffsetPerSecond = .2
						_fullPowerColor1 = [54, 0, 91, 127]
						_lowPowerColor1 = [54, 0, 91, 127]
						_fullPowerColor2 = [0, 0, 255, 127]
						_lowPowerColor2 = [255, 0, 0, 127]
						_lowPowerThicknessExponent = .6
						TargetBlendMode = Add
						_xScale = 0.5
						Size = [0, 1.0]
					}
					ArcSpriteSegments = 12
					Bucket = Upper1
				}

				: /BASE_SOUNDS/AudioExteriorDetail
				{
					Sound = "shield_emitter_loop.wav"
					Volume = .2
					Speed = 1
					MaxConcurrent = 1
					MaxConcurrentVolume = .4
					IgnoreIntensity = true
				}
			]
		}

		BackShieldOperationEffects
		{
			Type = ToggleEffects
			ChainedTo = BackArcShield
			Location = [&~/Part/Components/BackArcShield/Radius, 0]
			Toggle = BackIsOperational
			ToggledOnMediaEffects
			[
				: /BASE_SOUNDS/AudioExterior
				{
					Sound = "activate.wav"
					Volume = .5
					Speed = 1
					IgnoreIntensity = true
				}
			]
			ToggledOffMediaEffects
			[
				: /BASE_SOUNDS/AudioExterior
				{
					Sound = "deactivate.wav"
					Volume = .5
					Speed = 1
					IgnoreIntensity = true
				}
			]
		}
		//
		// Leftshield
		//
		LeftIsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, LeftBatteryStorage]
			Mode = All
		}
		LeftBatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 16000
			ToggleOnResources = 15001
			DrainOnFtlJump = true
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
		LeftBatteryConsumer
		{
			Type = ResourceConsumer
			ResourceType = battery
			Storage = LeftBatteryStorage
			DefaultPriority = &/PRIORITIES/Defense_Supply
			ResupplyThreshold = 500
			OperationalToggle = PowerToggle
		}

		LeftPowerDrain
		{
			Type = ResourceConverter
			OperationalToggle = LeftIsOperational
			FromStorage = LeftBatteryStorage
			FromQuantity = 100
			MinFromQuantityForConversion = 1
			Interval = 1
		}
		LeftArcShield
		{
			Type = ArcShield
			Radius = &~/Part/ShieldRadius
			Arc = 90d
			OperationalToggle = LeftIsOperational
			PenetrationResistance = [25, 0]
			DrainResourcesFrom = LeftBatteryStorage
			ResourceDrainPerDamage = .3
			Rotation = 180d
			Location = [2, 2]

			BlueprintArcSprite
			{
				Texture
				{
					File = "shield_energy.png"
					SampleMode = Linear
					MipLevels = 1
				}
				Size = [0, 1.5]
				Color = [0, 0, 255, 127]
			}
			BlueprintArcSpriteSegments = 64

			CoverageArcSprite
			{
				Texture
				{
					File = "shield_energy.png"
					SampleMode = Linear
					MipLevels = 1
				}
				Size = [0, 1.5]
				Color = [255, 255, 255, 127]
			}
			CoverageArcSpriteSegments = 64

			ShieldMediaEffects
			[
				{
					Type = ArcShield
					Radius = &~/Part/Components/LeftArcShield/Radius
					Arc = &~/Part/Components/LeftArcShield/Arc
					FadeInTime = .25
					FadeOutTime = .25
					FadeFromScale = .8
					ArcSprite
					{
						Texture
						{
							File = "shield_energy.png"
							SampleMode = Linear
							MipLevels = 1
						}
						Shader = "shield.shader"
						_waveTex
						{
							File = "shield_energy_wave.png"
							UVMode = Wrap
							SampleMode = Linear
							MipLevels = max
						}
						_maskTex
						{
							File = "shield_mask.png"
							SampleMode = Linear
							MipLevels = 1
						}
						_waveSpeed = 1
						_waveAlpha = 1
						_waveCurveInterval = .5
						_waveCurveMagnitude = .35
						_waveCurveUOffsetPerSecond = .2
						_fullPowerColor1 = [54, 0, 91, 127]
						_lowPowerColor1 = [54, 0, 91, 127]
						_fullPowerColor2 = [0, 0, 255, 127]
						_lowPowerColor2 = [255, 0, 0, 127]
						_lowPowerThicknessExponent = .6
						_xScale = 1
						TargetBlendMode = Add
						Size = [0, 1.5]
					}
					ArcSpriteSegments = 64
					Bucket = Lower1
				}

				: /BASE_SOUNDS/AudioExteriorDetail
				{
					Sound = "shield_loop.wav"
					Volume = .15
					Speed = .5
					MaxConcurrent = 1
					MaxConcurrentVolume = .3
					DynamicVolume : ^/0/DynamicVolume
					{
						MinDistance = .75
						MaxDistance = 1.5
					}
					IgnoreIntensity = true
				}
			]

			HitMediaEffects
			[
				{
					Type = ArcShield
					FadeInTime = .1
					FadeOutTime = .5
					Radius = &~/Part/Components/LeftArcShield/Radius
					Arc = 20d
					ArcSprite
					{
						Texture
						{
							File = "shield_energy_original.png"
							SampleMode = Linear
							MipLevels = max
						}
						Shader = "shield.shader"
						_waveTex
						{
							File = "shield_energy_wave.png"
							UVMode = Wrap
							SampleMode = Linear
							MipLevels = max
						}
						_maskTex
						{
							File = "shield_energy_original.png"
							SampleMode = Linear
							MipLevels = max
						}
						_waveSpeed = -2
						_waveAlpha = .75
						_waveCurveInterval = 1
						_waveCurveMagnitude = .25
						_waveCurveUOffsetPerSecond = 0
						//TargetBlendMode = Add
						_fullPowerColor1 = [0, 0, 255, 127]
						_lowPowerColor1 = [255, 0, 0, 200]
						_fullPowerColor2 = [154, 98, 238, 127]
						_lowPowerColor2 = [236, 150, 234, 127]
						_lowPowerThicknessExponent = .6
						_xScale = 1
						TargetBlendMode = Add
						Size = [0, 3]
					}
					ArcSpriteSegments = 6
					Bucket = Upper3
				}

				: /BASE_SOUNDS/AudioExterior
				{
					Sound = "shield_hit.wav"
					Volume = 1
					Speed = 1
					IgnoreIntensity = true
					SpeedVariation = .25
					MaxConcurrent = 10
				}
			]
		}

		LeftEmitterEffect
		{
			Type = ContinuousEffects
			ChainedTo = LeftArcShield
			FactorMediaEffectsIntensityWith = LeftBatteryStorage
			Location = [2.2, 0]
			OperationalToggle = LeftIsOperational
			ParentToShip = true
			MediaEffects
			[
				{
					Type = ArcShield
					Radius = 2.2
					Arc = 90d
					FadeInTime = .25
					FadeOutTime = .25
					ArcSprite
					{
						Texture
						{
							File = "shield_energy.png"
							SampleMode = Linear
							MipLevels = 1
						}
						UVRect = [0, 1, 1, -1]
						Shader = "shield.shader"
						_waveTex
						{
							File = "shield_energy_wave.png"
							UVMode = Wrap
							SampleMode = Linear
							MipLevels = max
						}
						_maskTex
						{
							File = "shield_mask.png"
							SampleMode = Linear
							MipLevels = 1
						}
						_waveSpeed = -1
						_waveAlpha = 1
						_waveCurveInterval = .5
						_waveCurveMagnitude = .35
						_waveCurveUOffsetPerSecond = .2
						_fullPowerColor1 = [54, 0, 91, 127]
						_lowPowerColor1 = [54, 0, 91, 127]
						_fullPowerColor2 = [0, 0, 255, 127]
						_lowPowerColor2 = [255, 0, 0, 127]
						_lowPowerThicknessExponent = .6
						TargetBlendMode = Add
						_xScale = 0.5
						Size = [0, 1.0]
					}
					ArcSpriteSegments = 12
					Bucket = Upper1
				}

				: /BASE_SOUNDS/AudioExteriorDetail
				{
					Sound = "shield_emitter_loop.wav"
					Volume = .2
					Speed = 1
					MaxConcurrent = 1
					MaxConcurrentVolume = .4
					IgnoreIntensity = true
				}
			]
		}

		LeftShieldOperationEffects
		{
			Type = ToggleEffects
			ChainedTo = LeftArcShield
			Location = [&~/Part/Components/LeftArcShield/Radius, 0]
			Toggle = LeftIsOperational
			ToggledOnMediaEffects
			[
				: /BASE_SOUNDS/AudioExterior
				{
					Sound = "activate.wav"
					Volume = .5
					Speed = 1
					IgnoreIntensity = true
				}
			]
			ToggledOffMediaEffects
			[
				: /BASE_SOUNDS/AudioExterior
				{
					Sound = "deactivate.wav"
					Volume = .5
					Speed = 1
					IgnoreIntensity = true
				}
			]
		}
		//
		// Rightshield
		//
		RightIsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, RightBatteryStorage]
			Mode = All
		}
		RightBatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 16000
			ToggleOnResources = 15001
			DrainOnFtlJump = true
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
		RightBatteryConsumer
		{
			Type = ResourceConsumer
			ResourceType = battery
			Storage = RightBatteryStorage
			DefaultPriority = &/PRIORITIES/Defense_Supply
			ResupplyThreshold = 500
			OperationalToggle = PowerToggle
		}

		RightPowerDrain
		{
			Type = ResourceConverter
			OperationalToggle = RightIsOperational
			FromStorage = RightBatteryStorage
			FromQuantity = 100
			MinFromQuantityForConversion = 1
			Interval = 1
		}
		RightArcShield
		{
			Type = ArcShield
			Radius = &~/Part/ShieldRadius
			Arc = 90d
			OperationalToggle = RightIsOperational
			PenetrationResistance = [25, 0]
			DrainResourcesFrom = RightBatteryStorage
			ResourceDrainPerDamage = .3
			Rotation = 0d
			Location = [2, 2]

			BlueprintArcSprite
			{
				Texture
				{
					File = "shield_energy.png"
					SampleMode = Linear
					MipLevels = 1
				}
				Size = [0, 1.5]
				Color = [0, 0, 255, 127]
			}
			BlueprintArcSpriteSegments = 64

			CoverageArcSprite
			{
				Texture
				{
					File = "shield_energy.png"
					SampleMode = Linear
					MipLevels = 1
				}
				Size = [0, 1.5]
				Color = [255, 255, 255, 127]
			}
			CoverageArcSpriteSegments = 64

			ShieldMediaEffects
			[
				{
					Type = ArcShield
					Radius = &~/Part/Components/RightArcShield/Radius
					Arc = &~/Part/Components/RightArcShield/Arc
					FadeInTime = .25
					FadeOutTime = .25
					FadeFromScale = .8
					ArcSprite
					{
						Texture
						{
							File = "shield_energy.png"
							SampleMode = Linear
							MipLevels = 1
						}
						Shader = "shield.shader"
						_waveTex
						{
							File = "shield_energy_wave.png"
							UVMode = Wrap
							SampleMode = Linear
							MipLevels = max
						}
						_maskTex
						{
							File = "shield_mask.png"
							SampleMode = Linear
							MipLevels = 1
						}
						_waveSpeed = 1
						_waveAlpha = 1
						_waveCurveInterval = .5
						_waveCurveMagnitude = .35
						_waveCurveUOffsetPerSecond = .2
						_fullPowerColor1 = [54, 0, 91, 127]
						_lowPowerColor1 = [54, 0, 91, 127]
						_fullPowerColor2 = [0, 0, 255, 127]
						_lowPowerColor2 = [255, 0, 0, 127]
						_lowPowerThicknessExponent = .6
						_xScale = 1
						TargetBlendMode = Add
						Size = [0, 1.5]
					}
					ArcSpriteSegments = 64
					Bucket = Lower1
				}

				: /BASE_SOUNDS/AudioExteriorDetail
				{
					Sound = "shield_loop.wav"
					Volume = .15
					Speed = .5
					MaxConcurrent = 1
					MaxConcurrentVolume = .3
					DynamicVolume : ^/0/DynamicVolume
					{
						MinDistance = .75
						MaxDistance = 1.5
					}
					IgnoreIntensity = true
				}
			]

			HitMediaEffects
			[
				{
					Type = ArcShield
					FadeInTime = .1
					FadeOutTime = .5
					Radius = &~/Part/Components/RightArcShield/Radius
					Arc = 20d
					ArcSprite
					{
						Texture
						{
							File = "shield_energy_original.png"
							SampleMode = Linear
							MipLevels = max
						}
						Shader = "shield.shader"
						_waveTex
						{
							File = "shield_energy_wave.png"
							UVMode = Wrap
							SampleMode = Linear
							MipLevels = max
						}
						_maskTex
						{
							File = "shield_energy_original.png"
							SampleMode = Linear
							MipLevels = max
						}
						_waveSpeed = -2
						_waveAlpha = .75
						_waveCurveInterval = 1
						_waveCurveMagnitude = .25
						_waveCurveUOffsetPerSecond = 0
						//TargetBlendMode = Add
						_fullPowerColor1 = [0, 0, 255, 127]
						_lowPowerColor1 = [255, 0, 0, 200]
						_fullPowerColor2 = [154, 98, 238, 127]
						_lowPowerColor2 = [236, 150, 234, 127]
						_lowPowerThicknessExponent = .6
						_xScale = 1
						TargetBlendMode = Add
						Size = [0, 3]
					}
					ArcSpriteSegments = 6
					Bucket = Upper3
				}

				: /BASE_SOUNDS/AudioExterior
				{
					Sound = "shield_hit.wav"
					Volume = 1
					Speed = 1
					IgnoreIntensity = true
					SpeedVariation = .25
					MaxConcurrent = 10
				}
			]
		}

		RightEmitterEffect
		{
			Type = ContinuousEffects
			ChainedTo = RightArcShield
			FactorMediaEffectsIntensityWith = RightBatteryStorage
			Location = [2.2, 0]
			OperationalToggle = RightIsOperational
			ParentToShip = true
			MediaEffects
			[
				{
					Type = ArcShield
					Radius = 2.2
					Arc = 90d
					FadeInTime = .25
					FadeOutTime = .25
					ArcSprite
					{
						Texture
						{
							File = "shield_energy.png"
							SampleMode = Linear
							MipLevels = 1
						}
						UVRect = [0, 1, 1, -1]
						Shader = "shield.shader"
						_waveTex
						{
							File = "shield_energy_wave.png"
							UVMode = Wrap
							SampleMode = Linear
							MipLevels = max
						}
						_maskTex
						{
							File = "shield_mask.png"
							SampleMode = Linear
							MipLevels = 1
						}
						_waveSpeed = -1
						_waveAlpha = 1
						_waveCurveInterval = .5
						_waveCurveMagnitude = .35
						_waveCurveUOffsetPerSecond = .2
						_fullPowerColor1 = [54, 0, 91, 127]
						_lowPowerColor1 = [54, 0, 91, 127]
						_fullPowerColor2 = [0, 0, 255, 127]
						_lowPowerColor2 = [255, 0, 0, 127]
						_lowPowerThicknessExponent = .6
						TargetBlendMode = Add
						_xScale = 0.5
						Size = [0, 1.0]
					}
					ArcSpriteSegments = 12
					Bucket = Upper1
				}

				: /BASE_SOUNDS/AudioExteriorDetail
				{
					Sound = "shield_emitter_loop.wav"
					Volume = .2
					Speed = 1
					MaxConcurrent = 1
					MaxConcurrentVolume = .4
					IgnoreIntensity = true
				}
			]
		}

		RightShieldOperationEffects
		{
			Type = ToggleEffects
			ChainedTo = RightArcShield
			Location = [&~/Part/Components/RightArcShield/Radius, 0]
			Toggle = RightIsOperational
			ToggledOnMediaEffects
			[
				: /BASE_SOUNDS/AudioExterior
				{
					Sound = "activate.wav"
					Volume = .5
					Speed = 1
					IgnoreIntensity = true
				}
			]
			ToggledOffMediaEffects
			[
				: /BASE_SOUNDS/AudioExterior
				{
					Sound = "deactivate.wav"
					Volume = .5
					Speed = 1
					IgnoreIntensity = true
				}
			]
		}
		
		//
		// Graphics
		//
		
		Graphics
		{
			Type = Graphics
			Location = [2, 2]
			OperationalToggle = IsOperational
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "floor.png"
						Size = [4, 4]
					}
					{
						File = "floor_33.png"
						Size = [4, 4]
					}
					{
						File = "floor_66.png"
						Size = [4, 4]
					}
				]
			}
			OperationalDoodad
			{
				Layer = "doodads_high"
				Offset = [0, -0.375]
				DamageLevels
				[
					{
						AnimationFiles
						[
							"doodads_on1.png"
							"doodads_on2.png"
							"doodads_on3.png"
							"doodads_on4.png"
							"doodads_on5.png"
							"doodads_on6.png"
							"doodads_on7.png"
							"doodads_on8.png"
						]
						Size = [2, 2]
						AnimationInterval = 0.1
					}
					{
						AnimationFiles
						[
							"doodads_on1_33.png"
							"doodads_on2_33.png"
							"doodads_on3_33.png"
							"doodads_on4_33.png"
							"doodads_on5_33.png"
							"doodads_on6_33.png"
							"doodads_on7_33.png"
							"doodads_on8_33.png"
						]
						Size = [2, 2]
						AnimationInterval = 0.1
					}
					{
						AnimationFiles
						[
							"doodads_on1_66.png"
							"doodads_on2_66.png"
							"doodads_on3_66.png"
							"doodads_on4_66.png"
							"doodads_on5_66.png"
							"doodads_on6_66.png"
							"doodads_on7_66.png"
							"doodads_on8_66.png"
						]
						Size = [2, 2]
						AnimationInterval = 0.1
					}
				]
			}
			OperationalLighting
			{
				Layer = "lights_add"
				DamageLevels
				[
					{
						File = "lights.png"
						Size = [4, 4]
					}
				]
			}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [4, 4]
					}
					{
						File = "walls_33.png"
						Size = [4, 4]
					}
					{
						File = "walls_66.png"
						Size = [4, 4]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "roof.png"
						NormalsFile = "roof_normals.png"
						Size = [4, 4]
					}
					{
						File = "roof_33.png"
						NormalsFile = "roof_normals_33.png"
						Size = [4, 4]
					}
					{
						File = "roof_66.png"
						NormalsFile = "roof_normals_66.png"
						Size = [4, 4]
					}
				]
			}
			OperationalRoofDoodad
			{
				Layer = "roof_doodads"
				DamageLevels
				[
					{
						File = "roof_glows.png"
						Size = [4, 4]
					}
					{
						File = "roof_glows_33.png"
						Size = [4, 4]
					}
					{
						File = "roof_glows_66.png"
						Size = [4, 4]
					}
				]
			}
			OperationalRoofLighting
			{
				Layer = "roof_lights_fancy"
				DamageLevels
				[
					{
						File = "./Data/ships/common/light_blob.png"
						Size = [5, 5]
						Z = 1 // Controls the "height" of the light for the purposes of normal mapping. Set to -1 (or any negative number) to disable normal lighting for this light.
						VertexColor = [195*1.5, 60*1.5, 255*1.5]
					}
				]
			}
		}

		External_Doodad_Graphics
		{
			Type = Graphics
			Location = [1, 0.5]
			OperationalDoodad
			{
				Layer = "weapons"
				DamageLevels
				[
					{
						File = "doodad_external.png"
						NormalsFile = "doodad_external_normals.png"
						Size = [2, 1]
					}
					{
						File = "doodad_external_33.png"
						NormalsFile = "doodad_external_normals_33.png"
						Size = [2, 1]
					}
					{
						File = "doodad_external_66.png"
						NormalsFile = "doodad_external_normals_66.png"
						Size = [2, 1]
					}
				]
			}
		}

		BatterySprites
		{
			Type = ResourceSprites
			Location = [1, 1.59375]
			ResourceStorage = FrontBatteryStorage
			Layer = "doodads_low"
			ResourceLevels
			[
				{
					File = "batteries1.png"
					Size = [2, 1]
				}
				{
					File = "batteries2.png"
					Size = [2, 1]
				}
				{
					File = "batteries3.png"
					Size = [2, 1]
				}
				{
					File = "batteries4.png"
					Size = [2, 1]
				}
				{
					File = "batteries5.png"
					Size = [2, 1]
				}
				{
					File = "batteries6.png"
					Size = [2, 1]
				}
			]
		}
		RoofBatterySprites
		{
			Type = ResourceSprites
			Location = [1, 1.6875]
			ResourceStorage = FrontBatteryStorage
			Layer = "roof_doodads"
			ResourceLevels
			[
				{
					File = "roof_batteries1.png"
					Offset = [-0.5, 0]
					Size = [1, 1]
				}
				{
					File = "roof_batteries2.png"
					Size = [2, 1]
				}
				{
					File = "roof_batteries3.png"
					Size = [2, 1]
				}
				{
					File = "roof_batteries4.png"
					Size = [2, 1]
				}
				{
					File = "roof_batteries5.png"
					Size = [2, 1]
				}
				{
					File = "roof_batteries6.png"
					Size = [2, 1]
				}
			]
		}

		OperationEffects
		{
			Type = ToggleEffects
			Toggle = IsOperational
			ToggledOnMediaEffects = &/COMMON_EFFECTS/PowerOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/PowerOff
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/MedPartDestroyed
			Location = [1, 1.5]
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [1, 1.5]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1, 1]
					}
				}

				// Out of power.
				{
					Toggle = FrontBatteryStorage
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [1, 1]
					}
				}
			]
		}

		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [2, 3]
		}
	}

	Stats
	{
		ShieldHP = (&~/Part/Components/FrontBatteryStorage/MaxResources) / (&~/Part/Components/FrontArcShield/ResourceDrainPerDamage)
		ShieldPenResist = &~/Part/Components/FrontArcShield/PenetrationResistance/0
		ShieldArc = deg(&~/Part/Components/FrontArcShield/Arc)
		ShieldDist = (&~/Part/Components/FrontArcShield/Radius) - (&~/Part/Components/FrontArcShield/Location/1)
		PowerUsageContinuous = (&~/Part/Components/FrontPowerDrain/FromQuantity) / (&~/Part/Components/FrontPowerDrain/Interval) / 1000
		PowerCapacity = (&~/Part/Components/FrontBatteryStorage/MaxResources) / 1000

		RecPower = (&PowerUsageContinuous) + 0.5
		RecCrew = (&RecPower) * 4
	}
}