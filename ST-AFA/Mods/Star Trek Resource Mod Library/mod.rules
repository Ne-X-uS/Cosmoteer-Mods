ID = nexusmods.010_st_resource_mod
Name = "ST-AFA - Resource Library"
Version = 0.1.1
CompatibleGameVersions = ["0.20.24"]
ModifiesMultiplayer = true
Author = "Panem et Circenses"
Logo = logo.png
Description = "<blue>STAR TREK - A FINAL ASSAULT</blue>\n\n"\
			  "Adds new STAR TREK stuff to the game \n\n"\
              "<red>WARNING: This mod is a WIP and a development mod. Some things might be unbalanced or broken!\n THIS MOD IS REQUIRED FOR MOST OF MY STAR TREK MODS</red> \n\n"\
			  "- adds new resource: torpedo parts and factory\n"\
			  "- adds new resource: antimatter (and factory WIP)\n"\
			  "- adds new resource: dilithium crystals (WIP)\n"
StringsFolder = "strings"

// The primary way mods modify the game is through "actions".
//
// Actions are little commands that modify the game's .rules files *after* they have been
// loaded into RAM. (The actual .rules files in the 'Data' folder are never modified
// and so disabling a mod will cause the game to revert back to its vanilla state.)
//
// First, the game loads the vanilla .rules files normally.
// Then, for every mod that is enabled, that mod's "actions" are run on
// top of the loaded .rules files, modifying them.
//
// Using this technique, mods can make almost any change to the game
// that *could* be made by modifying the .rules files directly, but
// without actually having to make any permanent changes to the game files.
//
// The examples below show all the different kinds of "actions" that can be
// performed on the vanilla .rules data.
//
// Note that it's very easy to make a modification that will cause the game
// to crash when loading. The log .txt file may have details on why it crashed.
//
// There are a small number of .rules files that can't be modified using actions.
// The most prominent example is the language string files (such as en.rules)
// which are modified using the StringsFolder setting above.		  


// The "Replace" action changes a vanilla data field to a modded data field.
		// Action = Replace
// The "Overrides" action allows multiple *named* data fields
// to be modified, or new named fields to be added.
		// Action = Overrides
// The "Remove" action deletes a vanilla data field from the game data.
		// Action = Remove
// The "RemoveMany" action is just like the "Remove" action, but it allows
// you to remove multiple data fields without having to create a separate action
// for each data field you want to remove.
		// Action = RemoveMany
// The "Add" action adds a new data field to an existing [] list.
// "Add" actions can also be used to add named data fields to existing
// files or {} groups. But when adding a named data field, you must also specify the
// name of the data field being added to the group.
//
// In this example, the control_room_small.rules file doesn't normally have a Density
// field (which defaults to 1.0), and so we can add that field to it
// to give the control room a different density.
		// Action = Add
// The "AddMany" action is similar to the "Add" action, but it can
// add multiple data fields to a single [] list, and it can't
// add named data fields. (You should use Overrides to add multiple named data fields.)
		// Action = AddMany

Actions
[
	//******************** FUNCTIONS ********************

	//******************** PARTS ********************
	{
		Action = AddMany
		AddTo = "<ships/terran/terran.rules>/terran/parts"
		ManyToAdd = &<Parts/Parts.rules>/Parts
	}
	//******************** SOUNDS ********************

	//******************** RESOURCES ********************
	{
		Action = AddMany
		AddTo = "<resources/resources.rules>/Resources"
		ManyToAdd = &<resources/resources.rules>/Resources
	}
	{
		Action = AddMany
		AddTo = "<doodads/doodads.rules>/Doodads"
		ManyToAdd = &<doodads/doodads.rules>/Doodads
	}
	//******************** UI ********************

]